# -*- coding: utf-8 -*-
"""Minst Random forest selection

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1ew8eRyR99YwlHefjv2hcL7Ab4lJ3NW4V
"""

#load minst dataset
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
import seaborn as sns
from keras.datasets import mnist

# Commented out IPython magic to ensure Python compatibility.
# %matplotlib inline

(train_images, train_labels), (test_images, test_labels) = mnist.load_data()

for i in range(10):
    plt.gray()
    plt.imshow(train_images[i])
    plt.show()

#reshape
train_images_flattened = train_images.reshape(train_images.shape[0], -1)
test_images_flattened = test_images.reshape(test_images.shape[0], -1)

print("Shape of flattened training images:", train_images_flattened.shape)
print("Shape of flattened testing images:", test_images_flattened.shape)

df_train = pd.DataFrame(train_images_flattened)
df_test = pd.DataFrame(test_images_flattened)
df_train.head()

df_train['Target'] = train_labels
df_test['Target'] = test_labels

X_train = df_train.drop('Target', axis=1)
y_train = df_train['Target']
X_test = df_test.drop('Target', axis=1)
y_test = df_test['Target']

from sklearn.ensemble import RandomForestClassifier
model = RandomForestClassifier(n_estimators = 244)
model.fit(X_train, y_train)

y_pred = model.predict(X_test)

model.score(X_test, y_test)

from sklearn.metrics import confusion_matrix
cm = confusion_matrix(y_test, y_pred)
#plot heatmap
plt.figure(figsize = (10,10))
sns.heatmap(cm, annot=True, cmap = 'coolwarm')
plt.show()

#classification
from sklearn.metrics import classification_report
print(classification_report(y_test, y_pred))

"""**Reasoning**:
Attempt to load the image again, this time specifying the full path to the image.


"""

from PIL import Image
new_image_path = '1d2cc955-b93a-4e6f-8df2-69e9ba90049d.jfif'
new_image = Image.open(new_image_path)

if new_image.mode != 'L':
    new_image = new_image.convert('L')

new_image = new_image.resize((28, 28))
new_image_array = np.array(new_image)
new_image_flattened = new_image_array.reshape(1, -1)

print("Shape of preprocessed image:", new_image_flattened.shape)

ew_image_reshaped = new_image_flattened.reshape(28, 28)

plt.imshow(new_image_reshaped, cmap='gray')
plt.axis('off')
plt.title("Preprocessed Image")
plt.show()

predicted_class = model.predict(new_image_flattened)

print("Predicted digit:", predicted_class[0])

